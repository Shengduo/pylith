# -*- Config -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# We simulate a simple earthquake cycle by superimposing coseismic
# slip on the top of the slab and splay fault with interseismic
# deformation matchnig that in Step03.
#
# Materials
#   The 'wedge' and 'crust' blocks use the the linear, isotropic
#   elastic material model, whereas the 'slab' and 'mantle' use the
#   linear Maxwell viscoelastic material model (mat_viscoelastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   + Uniform creep on the bottom of the slab.
#   + Uniform creep on the deeper portion of the subduction interface.
#   + Coseismic slip on the shallow portion of the subduction interface.
#   + Coseismic slip on the splay fault.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - step04.cfg (main parameter file for step04)
#   - mat_viscoelastic.cfg (material models and parameters)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# TO RUN THE SIMULATION:
#   pylith step04.cfg mat_viscoelastic.cfg solver_fieldsplit.cfg
#
# Output will be directed to the "output" directory.

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step04-parameters.json
problem.progress_monitor.filename = output/step04-progress.txt

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation.time_step]
# Define the total time for the simulation and the time step size.
total_time = 300.0*year
dt = 10.0*year

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# We do not want the boundaries to constrain the motion of the
# subducting slab, so we use the nodesets that exclude vertices on the
# subducting slab. Furthermore, PyLith does not permit overlap between
# the fault interfaces and Dirichlet boundary conditions. This is why
# we exclude vertices on the splay fault in these nodesets as well. We
# only update the name of the nodeset for the -x, -y, and +y
# boundaries.

# -x face
[pylithapp.problem.bc.x_neg]
label = boundary_xneg_noslab

# -y face
[pylithapp.problem.bc.y_neg]
label = boundary_yneg_noslab

# +y face
[pylithapp.problem.bc.y_pos]
label = boundary_ypos_noslab

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the top and bottom of the slab and on the splay
# fault.  Because the splay fault terminates into the through-going
# fault on the top of the slab, we must list the splay fault AFTER the
# fault for the top of the slab.
interfaces = [slab_top, slab_bottom, splay]

[pylithapp.problem.interfaces]
slab_top = pylith.faults.FaultCohesiveKin
slab_bottom = pylith.faults.FaultCohesiveKin
splay = pylith.faults.FaultCohesiveKin

# Slab top -------------------------------------------------------------
[pylithapp.problem.interfaces.slab_top]
id = 100 ; id must be unique across all materials and faults
label = fault_slabtop ; Nodeset for the entire fault surface
edge = fault_slabtop_edge ; Nodeset for the buried edges

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Use multiple earthquake sources for the top of the slab to model the
# earthquake cycle:
#  - creep
#  - eq1
#  - eq2
eq_srcs = [creep, eq1, eq2]
eq_srcs.creep.origin_time = 0.0*year
eq_srcs.eq1.origin_time = 99.999*year
eq_srcs.eq2.origin_time = 199.999*year

# Use the constant slip rate time function for the creep earthquake source.
eq_srcs.creep.slip_function = pylith.faults.ConstRateSlipFn

# Creep
[pylithapp.problem.interfaces.slab_top.eq_srcs.creep.slip_function]
slip_rate = spatialdata.spatialdb.SimpleGridDB
slip_rate.label = Slab top slip rate.
slip_rate.filename = spatialdb/fault_slabtop_creep.spatialdb
slip_rate.query_type = linear

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] ; Slip time is relative to origin time

# Earthquake 1
[pylithapp.problem.interfaces.slab_top.eq_srcs.eq1.slip_function]
slip = spatialdata.spatialdb.SimpleGridDB
slip.label = Slab top slip rate.
slip.filename = spatialdb/fault_slabtop_coseismic.spatialdb
slip.query_type = linear

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] ; Slip time is relative to origin time.

# Earthquake 2 (same as earthquake 1)
[pylithapp.problem.interfaces.slab_top.eq_srcs.eq2.slip_function]
slip = spatialdata.spatialdb.SimpleGridDB
slip.label = Slab top slip rate.
slip.filename = spatialdb/fault_slabtop_coseismic.spatialdb
slip.query_type = linear

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] ; Slip time is relative to origin time.

# Output
[pylithapp.problem.interfaces.slab_top.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step04-fault-slabtop.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# Slab bottom ----------------------------------------------------------
[pylithapp.problem.interfaces.slab_bottom]
id = 101 ; id must be unique across all materials and faults
label = fault_slabbot ; Nodeset for the entire fault surface
edge = fault_slabbot_edge ; Nodeset for the buried edges
up_dir = [-0.1,0,0.9]

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Use the constant slip rate time function.
eq_srcs.rupture.slip_function = pylith.faults.ConstRateSlipFn

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_bottom.eq_srcs.rupture.slip_function]
slip_rate = spatialdata.spatialdb.UniformDB
slip_rate.label = Slab bottom slip rate.
slip_rate.values = [left-lateral-slip, reverse-slip, fault-opening]
slip_rate.data = [+2.0*cm/year, -4.0*cm/year, 0.0*cm/year]

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] 

# Output
[pylithapp.problem.interfaces.slab_bottom.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step04-fault-slabbot.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# Splay ----------------------------------------------------------------
[pylithapp.problem.interfaces.splay]
id = 102 ; id must be unique across all materials and faults
label = fault_splay ; Nodeset for the entire fault surface
edge = fault_splay_edge ; Nodeset for the buried edges

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Origin time for splay fault earthquake.
eq_srcs.rupture.origin_time = 249.999*year

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.splay.eq_srcs.rupture.slip_function]
slip = spatialdata.spatialdb.UniformDB
slip.label = Splay fault slip.
slip.values = [left-lateral-slip, reverse-slip, fault-opening]
slip.data = [-1.0*m, 2.0*m, 0.0*m]

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] ; Relative to the origin time

# Output
[pylithapp.problem.interfaces.splay.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step04-fault-splay.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# Domain and subdomain output ------------------------------------------
[pylithapp.problem.formulation.output.domain]
writer.filename = output/step04-domain.h5

[pylithapp.problem.formulation.output.subdomain]
writer.filename = output/step04-groundsurf.h5

# Material output ------------------------------------------------------
[pylithapp.problem.materials.slab.output]
writer.filename = output/step04-slab.h5

[pylithapp.problem.materials.wedge.output]
writer.filename = output/step04-wedge.h5

[pylithapp.problem.materials.crust.output]
writer.filename = output/step04-crust.h5

[pylithapp.problem.materials.mantle.output]
writer.filename = output/step04-mantle.h5


# End of file
