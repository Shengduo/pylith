# -*- Config -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This problem drives spontaneous rupture on the subduction zone
# interface (top of the slab) via interseismic deformation.
#
# Materials
#   The 'wedge' and 'crust' blocks use the the linear, isotropic
#   elastic material model, whereas the 'slab' and 'mantle' use the
#   linear Maxwell viscoelastic material model (mat_viscoelastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   + Uniform creep on the bottom of the slab.
#   + Spontaneous rupture (slip-weakening friction) on the top of the
#     slab with stable sliding on the shallow and deeper portions.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - step05.cfg (main parameter file for step05)
#   - mat_viscoelastic.cfg (material models and parameters)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# TO RUN THE SIMULATION:
#   pylith step05.cfg mat_viscoelastic.cfg solver_fieldsplit.cfg
#
# Output will be directed to the "output" directory.

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step05-parameters.json
problem.progress_monitor.filename = output/step05-progress.txt

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation]
# Fault friction is a nonlinear problem so we need to use the
# nonlinear solver.
solver = pylith.problems.SolverNonlinear

[pylithapp.problem.formulation.time_step]
# Define the total time for the simulation and the time step size.
total_time = 100.0*year
dt = 2.5*year

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# We do not want the boundaries to constrain the motion of the
# subducting slab, so we use the nodesets that exclude vertices on the
# subducting slab. Furthermore, PyLith does not permit overlap between
# the fault interfaces and Dirichlet boundary conditions. This is why
# we exclude vertices on the splay fault in these nodesets as well. We
# only update the name of the nodeset for the -x, -y, and +y
# boundaries.

# -x face
[pylithapp.problem.bc.x_neg]
label = boundary_xneg_noslab

# -y face
[pylithapp.problem.bc.y_neg]
label = boundary_yneg_noslab

# +y face
[pylithapp.problem.bc.y_pos]
label = boundary_ypos_noslab

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the bottom of the slab with spontaneous rupture
# on the top of the slab.
interfaces = [slab_top, slab_bottom]

[pylithapp.problem.interfaces]
slab_top = pylith.faults.FaultCohesiveDyn
slab_bottom = pylith.faults.FaultCohesiveKin

# Slab top -------------------------------------------------------------
[pylithapp.problem.interfaces.slab_top]
id = 100
label = fault_slabtop
edge = fault_slabtop_edge

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Friction
friction = pylith.friction.SlipWeakening
friction.label = Slip weakening
# Force healing after each time step, so weakening is confined to each
# time step and does not carry over into subsequent time steps.
friction.force_healing = True

friction.db_properties = spatialdata.spatialdb.SimpleGridDB
friction.db_properties.label = Slip weakening
friction.db_properties.filename = spatialdb/fault_slabtop_slipweakening.spatialdb

# Initial fault tractions
traction_perturbation = pylith.faults.TractPerturbation
traction_perturbation.db_initial = spatialdata.spatialdb.SimpleGridDB
traction_perturbation.db_initial.label = Initial fault tractions
traction_perturbation.db_initial.filename = spatialdb/fault_slabtop_tractions.spatialdb

[pylithapp.problem.interfaces.slab_top.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step05-fault-slabtop.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]
vertex_data_fields = [slip, slip_rate, traction]

# Slab bottom ----------------------------------------------------------
[pylithapp.problem.interfaces.slab_bottom]
id = 101
label = fault_slabbot
edge = fault_slabbot_edge
up_dir = [-0.1,0,0.9]

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Use the constant slip rate time function.
eq_srcs.rupture.slip_function = pylith.faults.ConstRateSlipFn

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_bottom.eq_srcs.rupture.slip_function]
slip_rate = spatialdata.spatialdb.UniformDB
slip_rate.label = Slab bottom slip rate.
slip_rate.values = [left-lateral-slip, reverse-slip, fault-opening]
slip_rate.data = [0.0*cm/year, -8.0*cm/year, 0.0*cm/year]

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] 

[pylithapp.problem.interfaces.slab_bottom.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step05-fault-slabbot.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# Domain and subdomain output ------------------------------------------
[pylithapp.problem.formulation.output.domain]
writer.filename = output/step05-domain.h5

[pylithapp.problem.formulation.output.subdomain]
writer.filename = output/step05-groundsurf.h5

# Material output ------------------------------------------------------
[pylithapp.problem.materials.slab.output]
writer.filename = output/step05-slab.h5

[pylithapp.problem.materials.wedge.output]
writer.filename = output/step05-wedge.h5

[pylithapp.problem.materials.crust.output]
writer.filename = output/step05-crust.h5

[pylithapp.problem.materials.mantle.output]
writer.filename = output/step05-mantle.h5


# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.problem.interfaces.slab_top]
# Zero tolerance for locking fault (no slip). Must be larger than ksp tolerance.
zero_tolerance = 1.0e-8
zero_tolerance_normal = 1.0e-8

[pylithapp.petsc]
malloc_dump =

# Convergence parameters.
ksp_rtol = 1.0e-20
ksp_atol = 1.0e-9

snes_rtol = 1.0e-20
snes_atol = 1.0e-7

snes_max_it = 300

# Friction sensitivity solve used to compute the increment in slip
# associated with changes in the Lagrange multiplier imposed by the
# fault constitutive model.
friction_pc_type = asm
friction_sub_pc_factor_shift_type = nonzero
friction_ksp_max_it = 25
friction_ksp_gmres_restart = 30
friction_ksp_error_if_not_converged = true

# Uncomment to view details of friction sensitivity solve.
#friction_ksp_monitor = true
#friction_ksp_view = true
#friction_ksp_converged_reason = true

# End of file
