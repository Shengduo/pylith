// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2017 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_field_hh)
#error "Field.icc must be included only from Field.hh"
#else

#include "pylith/utils/error.h" // USES PYLITH_CHECK_ERROR

// Get local PetscSection.
inline
PetscSection
pylith::topology::Field::localSection(void) const {
  PetscSection s = NULL;
  if (_dm) {
    PetscErrorCode err = DMGetDefaultSection(_dm, &s);PYLITH_CHECK_ERROR(err);
  } // if
  return s;
}

// Get global PetscSection.
inline
PetscSection
pylith::topology::Field::globalSection(void) const {
  PetscSection s = NULL;
  if (_dm) {
    PetscErrorCode err = DMGetDefaultGlobalSection(_dm, &s);PYLITH_CHECK_ERROR(err);
  } // if
  return s;
}

// Get local vector.
inline
PetscVec
pylith::topology::Field::localVector(void) const {
  return _localVec;
}

// Get global vector.
inline
PetscVec
pylith::topology::Field::globalVector(void) const {
  return _globalVec;
}

// Get mesh associated with field.
inline
const
pylith::topology::Mesh&
pylith::topology::Field::mesh(void) const {
  return _mesh;
}

inline
PetscDM
pylith::topology::Field::dmMesh(void) const {
  return _dm;
}

// Get label for field.
inline
const char*
pylith::topology::Field::label(void) const {
  return _metadata.label.c_str();
}

// Set vector field type
inline
void
pylith::topology::Field::vectorFieldType(const VectorFieldEnum value) {
  _metadata.vectorFieldType = value;
}

// Get vector field type
inline
pylith::topology::Field::VectorFieldEnum
pylith::topology::Field::vectorFieldType(void) const {
  return _metadata.vectorFieldType;
}

// Set scale for dimensionalizing field.
inline
void
pylith::topology::Field::scale(const PylithScalar value) {
  _metadata.scale = value;
}

// Get scale for dimensionalizing field.
inline
PylithScalar
pylith::topology::Field::scale(void) const {
  return _metadata.scale;
}

// Set flag indicating whether it is okay to dimensionalize field.
inline
void
pylith::topology::Field::dimensionalizeOkay(const bool value) {
  _metadata.dimsOkay = value;
}

// Set flag indicating whether it is okay to dimensionalize field.
inline
bool
pylith::topology::Field::dimensionalizeOkay(void) const {
  return _metadata.dimsOkay;
}

// Add two fields, storing the result in one of the fields.
inline
void
pylith::topology::Field::add(const Field& field) {
  this->operator+=(field);
}



#endif


// End of file
